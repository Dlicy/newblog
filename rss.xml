<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:version="2.0"><channel><title>💠 Frosti</title><description>A clean, elegant, and fast static blog template! 🚀 Developed with Astro</description><link>https://frosti.saroprock.com/</link><language>zh</language><item><title>HDFS概述</title><link>https://frosti.saroprock.com/blog/hdfs%E6%A6%82%E8%BF%B0/</link><guid isPermaLink="true">https://frosti.saroprock.com/blog/hdfs%E6%A6%82%E8%BF%B0/</guid><description>A electron project introduce</description><content:encoded>&lt;blockquote&gt;This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: &lt;a href=&quot;https://frosti.saroprock.com/blog/hdfs%E6%A6%82%E8%BF%B0/&quot;&gt;https://frosti.saroprock.com/blog/hdfs%E6%A6%82%E8%BF%B0/&lt;/a&gt;&lt;/blockquote&gt; &lt;h3&gt;HDFS产生背景&lt;/h3&gt;
&lt;p&gt;大数据背景下，一个操作系统中存不下所有数据，将大量数据分散存储到更多的操作系统管理的磁盘中，为了方便管理和维护，迫切需要&lt;code&gt;一个系统来管理多台机器上的文件&lt;/code&gt;，这就是分布式文件管理系统，HDFS只是分布式文件管理系统的一种&lt;/p&gt;
&lt;h3&gt;HDFS定义&lt;/h3&gt;
&lt;p&gt;HDFS（Hadoop Distributed Filed System），是一个文件系统，用于存储文件，通过目录树来定位文件，其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色
HDFS的使用场景：适合一次写入，多次读出的场景。一个文件经过创建，写入和关闭后就不需要改变&lt;/p&gt;
&lt;h3&gt;HDFS优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;高容错性：数据自动保存多个副本，通过增加副本的形式，提高容错性。某一个副本丢失后可以自动恢复&lt;/li&gt;
&lt;li&gt;适合处理大数据：数据规模可达GB，TB甚至PB。文件规模可达百万以上&lt;/li&gt;
&lt;li&gt;可构建在廉价机器上，通过多副本机制，提高可靠性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HDFS缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不适合低延时数据访问：无法像mysql等的毫秒级的存储数据&lt;/li&gt;
&lt;li&gt;无法高效的对大量小文件进行存储：存储大量小文件会占用NameNode大量的内存来存储文件目录和块信息，而NameNode的内存有限，不适合存储大量小文件。同时，小文件存储的寻址时间会超过读取时间，违反了HDFS的设计目标&lt;/li&gt;
&lt;li&gt;不支持并发写入，文件随机修改：一个文件只能有一个写，不允许多个线程同时写，而且，&lt;code&gt;仅支持数据append(追加)&lt;/code&gt;，不支持文件随机修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HDFS组织结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;NameNode(nn)：就是Master，是一个主管，管理者&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;管理HDFS的名称空间
配置副本策略
管理数据块(Block)映射信息
处理客户端读写请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DataNode(dn)：就是Slave。NameNode下达命令，DataNode执行实际的操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;存储实际的数据块
执行数据块的读/写操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Client：就是客户端&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文件切分。文件上传HDFS的时候，Client将文件切分成一个一个的Block，然后进行上传
与NameNode交互，获取文件的位置信息
与DataNode交互，读取或写入数据
Client提供一些命令来管理HDFS，比如NameNode格式化
Client可以通过一些命令来访问HDFS，比如对HDFS增删改查操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Secondary NameNode(2nn)：并非NameNode的热备。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;辅助NameNode，分担其工作量，比如定期合并Fsimage和Edits，并推送给NameNode
在紧急情况下，可以辅助恢复NameNode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Dlicy/ImageBed/main/img/Snipaste_2025-05-10_15-55-54.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;HDFS文件块大小&lt;/h3&gt;
&lt;p&gt;HDFS中的文件在物理上是分块存储，块的大小可以通过配置参数(dfs.blocksize)来规定，&lt;code&gt;默认大小在Hadoop2.x/3.x版本中是128M，1.x版本中是64M&lt;/code&gt;
如果寻址时间约为10ms，即查找到目标block的时间为10ms
&lt;code&gt;寻址时间为传输时间的1%时，为最佳状态&lt;/code&gt;此时，传输时间=1s
而目前磁盘的传输速率普遍为100MB/s&lt;/p&gt;
&lt;p&gt;思考：为什么块的大小不能设置太大或太小
HDFS块设置的太小，会增加寻址时间，程序一直在找块的开始位置
HDFS块设置的太大，从磁盘传输数据的时间会明显大于定位这个块开始时间所需的时间，导致程序处理这块数据时，会很慢。
总结：块大小设置取决于磁盘传输速率&lt;/p&gt;
</content:encoded><dc:creator>Frosti</dc:creator><pubDate>Fri, 09 May 2025 16:00:00 GMT</pubDate></item><item><title>Hadoop概述</title><link>https://frosti.saroprock.com/blog/hadoop%E6%A6%82%E8%BF%B0/</link><guid isPermaLink="true">https://frosti.saroprock.com/blog/hadoop%E6%A6%82%E8%BF%B0/</guid><description>A electron project introduce</description><content:encoded>&lt;blockquote&gt;This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: &lt;a href=&quot;https://frosti.saroprock.com/blog/hadoop%E6%A6%82%E8%BF%B0/&quot;&gt;https://frosti.saroprock.com/blog/hadoop%E6%A6%82%E8%BF%B0/&lt;/a&gt;&lt;/blockquote&gt; &lt;h3&gt;大数据导论&lt;/h3&gt;
&lt;p&gt;大数据：指无法在一定时间范围内使用常规软件工具进行捕捉，管理和处理的数据集合。
大数据主要解决海量数据的采集，存储和分析计算问题&lt;/p&gt;
&lt;p&gt;存储单位：bit, Byte, KB, MB, GB, &lt;code&gt;TB&lt;/code&gt;, &lt;code&gt;PB&lt;/code&gt;, &lt;code&gt;EB&lt;/code&gt;, ZB, YB, BB, NB, DB&lt;/p&gt;
&lt;h4&gt;大数据特点&lt;/h4&gt;
&lt;p&gt;*Volumn(大量)
Velocity(高速)
Variety(多样)
Value(低价值密度)&lt;/p&gt;
&lt;h3&gt;Hadoop概述&lt;/h3&gt;
&lt;h4&gt;hadoop是什么&lt;/h4&gt;
&lt;p&gt;hadoop是一个由Apache基金会所开发的分布式系统基础架构，主要解决海量数据的存储和海量数据的分析计算问题。广义来说，Hadoop通常指的是一个更广泛的概念——Hadoop生态圈&lt;/p&gt;
&lt;h4&gt;hadoop发展历史&lt;/h4&gt;
&lt;p&gt;创始人Doug Cutting，在Lucene框架基础上进行优化升级&lt;/p&gt;
&lt;h4&gt;hadoop优势&lt;/h4&gt;
&lt;p&gt;*高可靠性
高扩展性
高效性
高容错性&lt;/p&gt;
&lt;h4&gt;hadoop组成&lt;/h4&gt;
&lt;p&gt;hadoop1.x，2.x，3.x区别
&lt;img src=&quot;https://raw.githubusercontent.com/Dlicy/ImageBed/main/img/Snipaste_2025-05-09_21-32-00.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5&gt;HDFS&lt;/h5&gt;
&lt;p&gt;HDFS是一个分布式文件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NameNode(nn)：存储文件的元数据，如文件名，文件目录结构，文件属性，以及每个文件的块列表和块所在的DataNode等&lt;/li&gt;
&lt;li&gt;DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和&lt;/li&gt;
&lt;li&gt;SecondaryNameNode(2nn)：每隔一段时间对NameNode元数据备份&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;YARN&lt;/h5&gt;
&lt;p&gt;Yarn是另一种资源协调者，是Hadoop的资源管理器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ResourceManager(RM)：整个集群资源(内存，cpu等)的老大&lt;/li&gt;
&lt;li&gt;NodeManager(NM)：单个节点服务器资源老大&lt;/li&gt;
&lt;li&gt;ApplicationMaster(AM)：单个任务运行的老大&lt;/li&gt;
&lt;li&gt;Container：容器，相当一台独立的服务器，里面封装了任务运行所需要的资源，如内存，cpu，磁盘，网络等
&lt;em&gt;ps：&lt;/em&gt;
客户端可以有多个
集群上可以运行多个ApplicationMaster
每个NodeManager上可以有多个Container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Dlicy/ImageBed/main/img/Snipaste_2025-05-09_21-43-05.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5&gt;MapReduce&lt;/h5&gt;
&lt;p&gt;计算部分被分为两个阶段：Map和Reduce
Map阶段并行处理输入数据
Reduce阶段对Map结果进行汇总&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Dlicy/ImageBed/main/img/Snipaste_2025-05-09_21-45-59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5&gt;三者关系&lt;/h5&gt;
&lt;h6&gt;HDFS&lt;/h6&gt;
&lt;p&gt;分布式存储层
将大文件分割成块，分散存储在多态机器上提供高容错性和高吞吐量的数据访问
HDFS是&lt;code&gt;Yarn&lt;/code&gt;和&lt;code&gt;MapReduce&lt;/code&gt;的数据基础，存储待处理的输入数据和计算结果&lt;/p&gt;
&lt;h6&gt;Yarn&lt;/h6&gt;
&lt;p&gt;资源管理和任务调度层
负责集群的资源分配(cpu，内容)和任务调度(如MapReduce，Spark等)，通过ResourceManager和NodeManager协调资源
Yarn是&lt;code&gt;MapReduce&lt;/code&gt;的运行平台：MapReduce作业通过Yarn申请资源并执行。解耦了Hadoop的存储(HDFS)与计算(MapReduce)，是Hadoop可以支持多种计算框架(如Spark，Flink)&lt;/p&gt;
&lt;h6&gt;MapReduce&lt;/h6&gt;
&lt;p&gt;分布式计算模型
提供简单的编程模型(Map和Reduce阶段)，处理HDFS上的海量数据。自动并行化计算，处理数据分片(Split)，排序(Shuffle)，聚合等
依赖HDFS：输入和输出数据存储在HDFS上。
依赖Yarn：由Yarn分配资源并调度MapReduce的任务(如Map Task和Reduce Task)&lt;/p&gt;
&lt;h6&gt;协作流程(以WorkCount为例)&lt;/h6&gt;
&lt;p&gt;1.数据存储：文本文件存入HDFS，被拆分为多个块分布在不同节点。
2.资源申请：提交MapReduce作业到Yarn，Yarn的ResourceManager分配容器(Container)运行任务
3.计算执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map阶段：多个Map Task并行处理HDFS的数据块，生成键值对&lt;/li&gt;
&lt;li&gt;Shuffle &amp;amp; Reduce阶段：Yarn调度Reduce Task聚合结果，最终输出到HDFS。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Dlicy/ImageBed/main/img/Snipaste_2025-05-09_22-05-25.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5&gt;技术生态体系&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Dlicy/ImageBed/main/img/Snipaste_2025-05-09_22-07-06.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content:encoded><dc:creator>Frosti</dc:creator><pubDate>Fri, 09 May 2025 16:00:00 GMT</pubDate></item><item><title>sql用法</title><link>https://frosti.saroprock.com/blog/sql%E7%94%A8%E6%B3%95/</link><guid isPermaLink="true">https://frosti.saroprock.com/blog/sql%E7%94%A8%E6%B3%95/</guid><description>Some contents about the usage of sql</description><content:encoded>&lt;blockquote&gt;This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: &lt;a href=&quot;https://frosti.saroprock.com/blog/sql%E7%94%A8%E6%B3%95/&quot;&gt;https://frosti.saroprock.com/blog/sql%E7%94%A8%E6%B3%95/&lt;/a&gt;&lt;/blockquote&gt; &lt;h4&gt;group by 用法&lt;/h4&gt;
&lt;p&gt;group by只能使用在&lt;code&gt;select&lt;/code&gt;语句后&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select column_name, aggregation_functions(column_name)
from table_name
group by column_name
(having aggregation_functions(column_name)&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;select中所有的不在聚合函数中列名都必须出现在group by中。
hive中取别名不需要使用&lt;code&gt;as&lt;/code&gt;,直接在聚合函数后面空一格写即可&lt;/p&gt;
</content:encoded><dc:creator>Frosti</dc:creator><pubDate>Thu, 08 May 2025 16:00:00 GMT</pubDate></item><item><title>electron</title><link>https://frosti.saroprock.com/blog/electron/</link><guid isPermaLink="true">https://frosti.saroprock.com/blog/electron/</guid><description>A electron project introduce</description><content:encoded>&lt;blockquote&gt;This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: &lt;a href=&quot;https://frosti.saroprock.com/blog/electron/&quot;&gt;https://frosti.saroprock.com/blog/electron/&lt;/a&gt;&lt;/blockquote&gt; &lt;p&gt;electron是基于node.js开发的桌面端应用开发工具&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt;初始化命令会提示您在项目初始化配置中设置一些值 为本教程的目的，有几条规则需要遵循：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;entry point&lt;/code&gt; 应为 &lt;code&gt;main.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;author&lt;/code&gt; 与 &lt;code&gt;description&lt;/code&gt; 可为任意值，但对于&lt;a href=&quot;https://www.electronjs.org/zh/docs/latest/tutorial/quick-start#package-and-distribute-your-application&quot;&gt;应用打包&lt;/a&gt;是必填项。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你的 &lt;code&gt;package.json&lt;/code&gt; 文件应该像这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{  
	&amp;quot;name&amp;quot;: &amp;quot;my-electron-app&amp;quot;,
	&amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,  
	&amp;quot;description&amp;quot;: &amp;quot;Hello World!&amp;quot;, 
	&amp;quot;main&amp;quot;: &amp;quot;main.js&amp;quot;,  
	&amp;quot;author&amp;quot;: &amp;quot;Jane Doe&amp;quot;, 
	&amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后安装electron包&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install electron --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;--save-dev作用: npm 会将该包添加到 &lt;code&gt;devDependencies&lt;/code&gt; 部分的 &lt;code&gt;package.json&lt;/code&gt; 文件中。这意味着该依赖包仅在开发环境中需要，而在生产环境中不需要，可以有效隔离环境。
使用 --save（或省略该标志），npm 会将依赖包添加到 &lt;code&gt;dependencies&lt;/code&gt; 部分，这意味着该包在生产环境中也是必需的。
npm 用不了也可以用其他的 &lt;code&gt;pnpm&lt;/code&gt;，&lt;code&gt;cnpm(这个确实可以使用)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-package.json&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;start&amp;quot;: &amp;quot;electron --no-sandbox&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  对于wsl中，因为是root用户，需要使用 &lt;code&gt;--no-sandbox&lt;/code&gt; 来解决，作用是关闭沙盒，会影响安全性
  这样做可能会引入安全风险，因为禁用沙箱会降低隔离性。
  其他情况下不需要 &lt;code&gt;--no-sandbox&lt;/code&gt; 。&lt;/p&gt;
&lt;h2&gt;语法&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-main.js&quot;&gt;const {app, BrowserWindow } = require(&amp;#39;electron&amp;#39;)

function createWindow() { 
  const win = new BrowserWindow({
    width:800,
    height:600,
    autoHideMenuBar: true,
    alwaysOnTop:true,
    x:0,
    y:0
  })

  win.loadFile(&amp;#39;./a.html&amp;#39;)
}

app.on(&amp;#39;ready&amp;#39;, ()=&amp;gt;{
  createWindow()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;解析&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;const { app, BrowserWindow } = require(&amp;#39;electron&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注册一个app和BrowserWindow， app是项目的入口，BrowserWindow创建一个窗口。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app.on(&amp;#39;ready&amp;#39;, ()=&amp;gt;{
	createWindow()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里在app，状态为ready时，触发回调函数，这里为箭头函数，函数里调用了createWindow()函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function createWindow() { 
  const win = new BrowserWindow({
    width:800,
    height:600,
    autoHideMenuBar: true,
    alwaysOnTop:true,
    x:0,
    y:0
  })

  win.loadFile(&amp;#39;./a.html&amp;#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义createWindow()函数，创建一个BrowserWindow的实例化，并设置配置项。width：宽度，height：高度，x,y：窗口出现的位置，autoHideMenuBar：自动隐藏菜单栏，alwaysOnTop：始终页面图层置顶
更多设置在&lt;a href=&quot;https://www.electronjs.org/zh/docs/latest/api/browser-window&quot;&gt;Electron-BrowserWindow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;win.loadFile(&amp;#39;./a.html&amp;#39;)这里加载一个本地页面
win.loadURL(&amp;#39;&amp;#39;)可以加载一个网页&lt;/p&gt;
&lt;p&gt;![[Pasted image 20241223230357.png]]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Security-Policy&amp;quot; content=&amp;quot;default-src &amp;#39;self&amp;#39;; style-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39;; img-src &amp;#39;self&amp;#39; data:;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安全策略，引入外部资源必须是同源的，引入的样式表必须是同源的或是行内样式，引入的图片必须是同源的或是使用data：URI来嵌入图像。
[[js_基础1#使用data URI实现插入图片内容]]&lt;/p&gt;
&lt;h3&gt;系统差别的细节化操作&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.on(&amp;#39;window-all-close&amp;#39;, ()={
	if (process.platform !== &amp;#39;darwin&amp;#39;) app.quit()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里判断app的状态，当所有页面都关闭时，触发回调函数。如果平台不是苹果，卸载(关闭)app&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.on(&amp;#39;activate&amp;#39;, ()=&amp;gt;{
	if (BroserWindow.getAllWindows().length === 0) createwindow()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(苹果系统) 当应用被激活时，如果目前没有窗口，就创建一个窗口。&lt;/p&gt;
&lt;h4&gt;配置自动重启&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cnpm i nodemon -D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下载nodemon，配置自动重启项&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nodemon.json&quot;&gt;{
    &amp;quot;ignore&amp;quot;: [
        &amp;quot;node_modules&amp;quot;,
        &amp;quot;dist&amp;quot;
    ],
    &amp;quot;restartable&amp;quot;: &amp;quot;r&amp;quot;,
    &amp;quot;watch&amp;quot;: [&amp;quot;*.*&amp;quot;],
    &amp;quot;ext&amp;quot;: &amp;quot;html,js,css&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里解释一下各个配置项。
ignore，忽略node_modules和dist文件夹。
watch，监视
ext，指明文件类型为html，js，css
restartable，使用字母r可以重启&lt;/p&gt;
&lt;p&gt;这里只有main.js为主进程，其他js文件均为渲染进程
在主加载进程与渲染进程中，还有一个预加载脚本，协调两个进程脚本&lt;/p&gt;
&lt;h4&gt;预加载脚本&lt;/h4&gt;
&lt;p&gt;预加载脚本需要在main.js里面修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const { app, BrowserWindow } = require(&amp;#39;electron&amp;#39;)
const path = require(&amp;#39;path&amp;#39;)
function createWindow() {
  const win = new BrowserWindow({
    width:800,
    height:600,
    autoHideMenuBar: true,
    alwaysOnTop:true,
    webPreferences:{
      preload:path.resolve(__dirname,&amp;#39;./preload.js&amp;#39;)
    }
  })
  win.loadFile(&amp;#39;pages/index.html&amp;#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;const path = require(&amp;#39;path&amp;#39;)

    webPreferences:{
      preload:path.resolve(__dirname,&amp;#39;./preload.js&amp;#39;)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里使用了相对路径，找到了当前文件夹下的preload.js文件。并作为预加载脚本，在启动渲染进程时运行。&lt;/p&gt;
&lt;p&gt;部分解决：使用预加载脚本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-preload.js&quot;&gt;const { contextBridge } = require(&amp;#39;electron&amp;#39;)

contextBridge.exposeInMainWorld(&amp;#39;myAPI&amp;#39;, {
    version:process.version
})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-render.js&quot;&gt;const btn1 = document.getElementById(&amp;#39;btn1&amp;#39;)

btn1.onclick = ()=&amp;gt;{
    alert(myAPI.version)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解释一下这里的两个脚本。preload.js即预加载脚本。通过 &lt;code&gt;const { contextBridge } = require(&amp;#39;electron&amp;#39;)&lt;/code&gt; 来引入contextBridge。
然后通过 &lt;code&gt;contextBridge.exposeInMainWorld&lt;/code&gt; 方法来实现部分通信的传递。例如这里可以通过定义 &lt;code&gt;myAPI&lt;/code&gt; 来向render.js传递内部的信息。这里process.version是调出了node的版本信息。而在render.js中，只需要通过定义好的 &lt;code&gt;myAPI&lt;/code&gt; 中的 &lt;code&gt;version&lt;/code&gt; 即可调用出对应的信息。&lt;/p&gt;
&lt;p&gt;问题：这里只能传递一部分的信息，无法完整做到进程通信。&lt;/p&gt;
&lt;h3&gt;进程通信&lt;/h3&gt;
&lt;p&gt;进程通信主要指主进程与渲染进程之间的通信关系。而这种通信主要通过预加载脚本进行实现，在预加载脚本中，&lt;/p&gt;
&lt;h4&gt;渲染向主进程单向通信&lt;/h4&gt;
&lt;p&gt;这里举一个例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-preload.js&quot;&gt;const { contextBridge, ipcRenderer } = require(&amp;#39;electron&amp;#39;)

contextBridge.exposeInMainWorld(&amp;#39;myAPI&amp;#39;, {
    version:process.version,
    saveFile:(data)=&amp;gt;{
        ipcRenderer.send(&amp;#39;file-save&amp;#39;, data)
    }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里是预加载脚本，需要介绍的是 &lt;code&gt;ipcRenderer&lt;/code&gt; ，这个是负责通信传递的，在上文提到的 &lt;code&gt;contextBridge&lt;/code&gt; 通信方法下，自定义新的方法——saveFile，接收一个data参数，交给 &lt;code&gt;ipcRenderer&lt;/code&gt; 的send方法，进行传递， &lt;code&gt;send&lt;/code&gt; 方法接收两个参数，信道与数据，信道在后面的 &lt;code&gt;ipcMain&lt;/code&gt; 中还要使用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-render.js&quot;&gt;const btn1 = document.getElementById(&amp;#39;btn1&amp;#39;)
const input = document.getElementById(&amp;#39;input&amp;#39;)
const btn2 = document.getElementById(&amp;#39;btn2&amp;#39;)

btn2.onclick = ()=&amp;gt;{
    myAPI.saveFile(input.value)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在render.js即渲染进程中，只需要像之前那样，调用 &lt;code&gt;contextBridge&lt;/code&gt; 中定义好的方法，通过定义的 &lt;code&gt;myAPI&lt;/code&gt; 的 &lt;code&gt;saveFile&lt;/code&gt; 方法传递参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-main.js&quot;&gt;const { app, BrowserWindow, ipcMain } = require(&amp;#39;electron&amp;#39;)
const path = require(&amp;#39;path&amp;#39;)
const fs = require(&amp;#39;fs&amp;#39;)

function writeFile(_, data) {
   fs.writeFileSync(&amp;#39;./hello.txt&amp;#39;, data)
}

function createWindow() {
  const win = new BrowserWindow({
    width:800,
    height:600,
    autoHideMenuBar: true,
    webPreferences:{
      preload:path.resolve(__dirname,&amp;#39;./preload.js&amp;#39;)
    }
  })
  
  ipcMain.on(&amp;#39;file-save&amp;#39;, writeFile)
  win.loadFile(&amp;#39;pages/index.html&amp;#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在main.js即主进程中，需要介绍的是 &lt;code&gt;ipcMain&lt;/code&gt; ，这是对应 &lt;code&gt;ipcRender&lt;/code&gt; 用来接收数据的，&lt;code&gt;ipcMain.on(&amp;#39;file-save&amp;#39;, writeFile)&lt;/code&gt; ，这里 &lt;code&gt;ipcMain.on&lt;/code&gt; 接收两个参数，一个是上面提到的信道，另一个是回调函数。接着，是回调函数的部分，这里的回调函数接收两个参数，event和data。前者是js基本功部分暂时不考虑，后者是我们需要传递的data数据。
这样一个单项传递就可以结束了。&lt;/p&gt;
&lt;h4&gt;渲染进程向主进程双向通信&lt;/h4&gt;
&lt;p&gt;这里拓展上面的例子，从文件写入后进行读取并返回&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-main.js&quot;&gt;const { app, BrowserWindow, ipcMain } = require(&amp;#39;electron&amp;#39;)
const path = require(&amp;#39;path&amp;#39;)
const fs = require(&amp;#39;fs&amp;#39;)

function writeFile(_, data) {
   fs.writeFileSync(&amp;#39;./hello.txt&amp;#39;, data)
}

function readFile() {
  return fs.readFileSync(&amp;#39;./hello.txt&amp;#39;).toString()
}

function createWindow() {
  const win = new BrowserWindow({
    width:800,
    height:600,
    autoHideMenuBar: true,
    webPreferences:{
      preload:path.resolve(__dirname,&amp;#39;./preload.js&amp;#39;)
    }
  })

  ipcMain.on(&amp;#39;file-save&amp;#39;, writeFile)
  ipcMain.handle(&amp;#39;file-read&amp;#39;,readFile)
  win.loadFile(&amp;#39;pages/index.html&amp;#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是mian.js即主进程。因为对应预加载脚本中使用的是 &lt;code&gt;ipcRenderer&lt;/code&gt; 的 &lt;code&gt;invoke&lt;/code&gt; 方法。所以这里需要对应使用 &lt;code&gt;ipcMain.handle&lt;/code&gt; 来进行处理。然后是这个回调函数，这里不仅需要取出对应的内容，还需要将这个数据传递给渲染进程。所以这里使用 &lt;code&gt;return&lt;/code&gt; 返回内容。而对应这个返回的内容，将在下面讲解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-preload.js&quot;&gt;const { contextBridge, ipcRenderer } = require(&amp;#39;electron&amp;#39;)

contextBridge.exposeInMainWorld(&amp;#39;myAPI&amp;#39;, {
    version:process.version,
    saveFile:(data)=&amp;gt;{
        ipcRenderer.send(&amp;#39;file-save&amp;#39;, data)
    },
    readFile(){
        return ipcRenderer.invoke(&amp;#39;file-read&amp;#39;)
    }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是预加载脚本，需要注意的是，这里的 &lt;code&gt;readFile&lt;/code&gt; 方法中使用的是 &lt;code&gt;invoke&lt;/code&gt; 同时，这里的这个方法会返回一个data数据，即上文提到的从文件中取出的内容。而且，这里 &lt;code&gt;invoke方法&lt;/code&gt; 返回的数据是一个 &lt;code&gt;Promise&lt;/code&gt; 数据，需要使用异步操作来进行处理才能拿到最后的数据。为了文件整洁，将异步操作留在渲染进程处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-render.js&quot;&gt;const btn1 = document.getElementById(&amp;#39;btn1&amp;#39;)
const input = document.getElementById(&amp;#39;input&amp;#39;)
const btn2 = document.getElementById(&amp;#39;btn2&amp;#39;)
const btn3 = document.getElementById(&amp;#39;btn3&amp;#39;)

btn1.onclick = ()=&amp;gt;{
    alert(myAPI.version)
}

btn2.onclick = ()=&amp;gt;{
    myAPI.saveFile(input.value)
}

btn3.onclick = async ()=&amp;gt;{
    let data = await myAPI.readFile()
    alert(data)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;渲染进程中只有简单的操作，使用异步操作读取到对应的数据即可。&lt;/p&gt;
&lt;h4&gt;主进程到渲染进程&lt;/h4&gt;
&lt;p&gt;可以不要使用，使用上面的双向即可。
原理是从主进程使用 &lt;code&gt;send&lt;/code&gt; 方法，然后在渲染进程中 &lt;code&gt;.on&lt;/code&gt; 来接收&lt;/p&gt;
&lt;h4&gt;渲染进程向渲染进程&lt;/h4&gt;
&lt;p&gt;不能直接传递，需要主进程作为中间人进行传递。渲-&amp;gt;主-&amp;gt;渲&lt;/p&gt;
&lt;h3&gt;打包&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-package.json&quot;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;nodemon --exec electron --no-sandbox .&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;electron-build&amp;quot;
  },
  &amp;quot;build&amp;quot;: {
    &amp;quot;appId&amp;quot;: &amp;quot;com.yang&amp;quot;, //程序唯一标识符

    &amp;quot;win&amp;quot;: { //windows配置
      &amp;quot;icon&amp;quot;: &amp;quot;&amp;quot;, //图标
      &amp;quot;target&amp;quot;: [
        {
          &amp;quot;target&amp;quot;: &amp;quot;nsis&amp;quot;, //使用nsis作为安装程序格式，生成的是exe安装程序（非msi）
          &amp;quot;arch&amp;quot;: [&amp;quot;x64&amp;quot;] // 生成64位安装包
        }
      ]
    },
    &amp;quot;nsis&amp;quot;: {
      &amp;quot;oneclick&amp;quot;: false, //设置位false，是安装程序显示安装向导界面，而不是一键安装
      &amp;quot;perMachine&amp;quot;: true, //允许每一台机器安装一次，而不是每一个用户安装一次
      &amp;quot;allowToChangeInstallationDirectory&amp;quot;: true // 允许用户选择安装位置
    }
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;scripts部分修改，build部分添加，在执行时删掉注释。&lt;/p&gt;
</content:encoded><dc:creator>Frosti</dc:creator><pubDate>Wed, 07 May 2025 16:00:00 GMT</pubDate></item><item><title>Adding Comment Systems to Frosti</title><link>https://frosti.saroprock.com/blog/adding-comment-systems/</link><guid isPermaLink="true">https://frosti.saroprock.com/blog/adding-comment-systems/</guid><description>A comprehensive guide on how to integrate Twikoo and Waline comment systems into your Frosti blog</description><content:encoded>&lt;blockquote&gt;This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: &lt;a href=&quot;https://frosti.saroprock.com/blog/adding-comment-systems/&quot;&gt;https://frosti.saroprock.com/blog/adding-comment-systems/&lt;/a&gt;&lt;/blockquote&gt; &lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;One of the essential features of any blog is the ability for readers to engage with your content through comments. While Frosti provides an excellent foundation for your Astro-based blog, adding a comment system requires a few additional steps. This guide will walk you through integrating popular comment systems like Twikoo and Waline into your Frosti blog.&lt;/p&gt;
&lt;p&gt;Static sites like those built with Astro don&amp;#39;t have built-in comment systems since they lack server-side processing. However, we can use third-party comment services that handle the backend for us, while we integrate their frontend components into our site.&lt;/p&gt;
&lt;h2&gt;Creating Comment Components in Astro&lt;/h2&gt;
&lt;p&gt;Before diving into specific comment systems, let&amp;#39;s understand how to create and use components in Astro. We&amp;#39;ll create reusable components for each comment system that can be easily added to any page.&lt;/p&gt;
&lt;h3&gt;Component Structure&lt;/h3&gt;
&lt;p&gt;We&amp;#39;ll create our comment components in the &lt;code&gt;src/components/comments&lt;/code&gt; directory. First, let&amp;#39;s make sure this directory exists:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir -p src/components/comments
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Integrating Twikoo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twikoo.js.org/&quot;&gt;Twikoo&lt;/a&gt; is a simple, safe comment system that supports Markdown and does not require user login. It&amp;#39;s easy to set up and can be deployed on various platforms.&lt;/p&gt;
&lt;h3&gt;Step 1: Set Up Twikoo Backend&lt;/h3&gt;
&lt;p&gt;Before integrating the frontend component, you need to set up the Twikoo backend. You can deploy it on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Tencent CloudBase&lt;/strong&gt; (recommended for users in Asia)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vercel&lt;/strong&gt; (recommended for global access)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://twikoo.js.org/en/quick-start.html&quot;&gt;official Twikoo deployment guide&lt;/a&gt; to set up your backend.&lt;/p&gt;
&lt;p&gt;Once deployed, you&amp;#39;ll get an environment ID (&lt;code&gt;envId&lt;/code&gt;), which you&amp;#39;ll need for the frontend integration.&lt;/p&gt;
&lt;h3&gt;Step 2: Create the Twikoo Component&lt;/h3&gt;
&lt;p&gt;Let&amp;#39;s create a reusable Twikoo component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch src/components/comments/Twikoo.astro
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let&amp;#39;s add the code to this component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;---
// Props interface for the component
interface Props {
  envId: string; // Your Twikoo environment ID
  region?: string; // Optional region (default: ap-shanghai)
  path?: string; // Optional custom path for comments
  lang?: string; // Optional language setting
}

// Destructure props with defaults
const { envId, region = &amp;quot;ap-shanghai&amp;quot;, path = Astro.url.pathname, lang = &amp;quot;en&amp;quot; } = Astro.props;
---

&amp;lt;div id=&amp;quot;twikoo-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script define:vars={{ envId, region, path, lang }}&amp;gt;
  document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, async () =&amp;gt; {
    try {
      // Dynamically import Twikoo script
      const twikooScript = document.createElement(&amp;quot;script&amp;quot;);
      twikooScript.src = &amp;quot;https://cdn.jsdelivr.net/npm/twikoo@1.6.42/dist/twikoo.all.min.js&amp;quot;;
      twikooScript.async = true;

      twikooScript.onload = () =&amp;gt; {
        twikoo.init({
          envId: envId,
          el: &amp;quot;#twikoo-container&amp;quot;,
          region: region,
          path: path,
          lang: lang,
        });
      };

      document.head.appendChild(twikooScript);
    } catch (error) {
      console.error(&amp;quot;Failed to load Twikoo:&amp;quot;, error);
    }
  });
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
  #twikoo-container {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Step 3: Using the Twikoo Component&lt;/h3&gt;
&lt;p&gt;You can now use the Twikoo component in any of your Astro pages or layouts. Here&amp;#39;s how to add it to your blog post template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;---
// In your blog post layout file
import Twikoo from &amp;quot;../../components/comments/Twikoo.astro&amp;quot;;
// Other imports and frontmatter...
---

&amp;lt;!-- Your blog post content --&amp;gt;
&amp;lt;article&amp;gt;
  &amp;lt;slot /&amp;gt;
&amp;lt;/article&amp;gt;

&amp;lt;!-- Add the comment section --&amp;gt;
&amp;lt;section class=&amp;quot;comments&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;Comments&amp;lt;/h2&amp;gt;
  &amp;lt;Twikoo envId=&amp;quot;your-environment-id&amp;quot; /&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace &lt;code&gt;&amp;quot;your-environment-id&amp;quot;&lt;/code&gt; with your actual Twikoo environment ID.&lt;/p&gt;
&lt;h2&gt;Integrating Waline&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://waline.js.org/&quot;&gt;Waline&lt;/a&gt; is a simple, safe comment system with backend and frontend separation. It&amp;#39;s feature-rich and highly customizable.&lt;/p&gt;
&lt;h3&gt;Step 1: Set Up Waline Backend&lt;/h3&gt;
&lt;p&gt;Before adding Waline to your site, you need to set up the backend:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a LeanCloud application to store your comments&lt;/li&gt;
&lt;li&gt;Deploy the Waline server to Vercel or other platforms&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://waline.js.org/guide/get-started/&quot;&gt;official Waline guide&lt;/a&gt; to set up your backend service. After deploying, you&amp;#39;ll get a server URL that you&amp;#39;ll need for the frontend component.&lt;/p&gt;
&lt;h3&gt;Step 2: Create the Waline Component&lt;/h3&gt;
&lt;p&gt;Let&amp;#39;s create a reusable Waline component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch src/components/comments/Waline.astro
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let&amp;#39;s add the code to this component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;---
// Props interface for the component
interface Props {
  serverURL: string; // Your Waline server URL
  path?: string; // Optional custom path for comments
  lang?: string; // Optional language setting
  dark?: string; // Optional dark mode CSS selector
  emoji?: string[]; // Optional emoji arrays
  meta?: string[]; // Optional comment information to show
  requiredMeta?: string[]; // Optional required metadata
  reaction?: boolean; // Enable article reactions
  pageview?: boolean; // Enable pageview statistics
}

// Destructure props with defaults
const {
  serverURL,
  path = Astro.url.pathname,
  lang = &amp;quot;en&amp;quot;,
  dark = &amp;quot;html.dark&amp;quot;,
  emoji = [&amp;quot;https://unpkg.com/@waline/emojis@1.1.0/weibo&amp;quot;, &amp;quot;https://unpkg.com/@waline/emojis@1.1.0/bilibili&amp;quot;],
  meta = [&amp;quot;nick&amp;quot;, &amp;quot;mail&amp;quot;, &amp;quot;link&amp;quot;],
  requiredMeta = [],
  reaction = false,
  pageview = false,
} = Astro.props;
---

&amp;lt;div id=&amp;quot;waline-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script
  define:vars={{
    serverURL,
    path,
    lang,
    dark,
    emoji,
    meta,
    requiredMeta,
    reaction,
    pageview,
  }}
&amp;gt;
  document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, async () =&amp;gt; {
    try {
      // Load Waline CSS
      const walineCSS = document.createElement(&amp;quot;link&amp;quot;);
      walineCSS.rel = &amp;quot;stylesheet&amp;quot;;
      walineCSS.href = &amp;quot;https://unpkg.com/@waline/client@v3/dist/waline.css&amp;quot;;
      document.head.appendChild(walineCSS);

      // Load Waline JS
      const walineScript = document.createElement(&amp;quot;script&amp;quot;);
      walineScript.src = &amp;quot;https://unpkg.com/@waline/client@v3/dist/waline.js&amp;quot;;
      walineScript.async = true;

      walineScript.onload = () =&amp;gt; {
        // Initialize Waline
        Waline.init({
          el: &amp;quot;#waline-container&amp;quot;,
          serverURL: serverURL,
          path: path,
          lang: lang,
          dark: dark,
          emoji: emoji,
          meta: meta,
          requiredMeta: requiredMeta,
          reaction: reaction,
          pageview: pageview,
        });
      };

      document.head.appendChild(walineScript);
    } catch (error) {
      console.error(&amp;quot;Failed to load Waline:&amp;quot;, error);
    }
  });
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
  #waline-container {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Step 3: Using the Waline Component&lt;/h3&gt;
&lt;p&gt;You can now use the Waline component in your Astro pages or layouts. Here&amp;#39;s how to add it to your blog post template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;---
// In your blog post layout file
import Waline from &amp;quot;../../components/comments/Waline.astro&amp;quot;;
// Other imports and frontmatter...
---

&amp;lt;!-- Your blog post content --&amp;gt;
&amp;lt;article&amp;gt;
  &amp;lt;slot /&amp;gt;
&amp;lt;/article&amp;gt;

&amp;lt;!-- Add the comment section --&amp;gt;
&amp;lt;section class=&amp;quot;comments&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;Comments&amp;lt;/h2&amp;gt;
  &amp;lt;Waline serverURL=&amp;quot;https://your-waline-server.vercel.app&amp;quot; /&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace &lt;code&gt;&amp;quot;https://your-waline-server.vercel.app&amp;quot;&lt;/code&gt; with your actual Waline server URL.&lt;/p&gt;
&lt;h2&gt;Adding Comment System Selection&lt;/h2&gt;
&lt;p&gt;To make your blog more flexible, you might want to allow users to choose their preferred comment system through configuration. Here&amp;#39;s a simple approach to achieve this:&lt;/p&gt;
&lt;h3&gt;Step 1: Create a Configuration File&lt;/h3&gt;
&lt;p&gt;First, create a configuration file for your blog:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch src/config.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add comment system configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;export const siteConfig = {
  // Other site configuration...
  comments: {
    // Which comment system to use: &amp;#39;twikoo&amp;#39;, &amp;#39;waline&amp;#39;, or &amp;#39;none&amp;#39;
    provider: &amp;quot;twikoo&amp;quot;,

    // Twikoo configuration
    twikoo: {
      envId: &amp;quot;your-environment-id&amp;quot;,
      region: &amp;quot;ap-shanghai&amp;quot;
    },

    // Waline configuration
    waline: {
      serverURL: &amp;quot;https://your-waline-server.vercel.app&amp;quot;
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Step 2: Create a CommentSystem Component&lt;/h3&gt;
&lt;p&gt;Now, create a component that will conditionally render the selected comment system:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch src/components/comments/CommentSystem.astro
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;---
import { siteConfig } from &amp;quot;../../config&amp;quot;;
import Twikoo from &amp;quot;./Twikoo.astro&amp;quot;;
import Waline from &amp;quot;./Waline.astro&amp;quot;;

// Get comment system configuration
const { provider, twikoo, waline } = siteConfig.comments;
---

&amp;lt;div class=&amp;quot;comments-container&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;Comments&amp;lt;/h2&amp;gt;

  {provider === &amp;quot;twikoo&amp;quot; &amp;amp;&amp;amp; &amp;lt;Twikoo envId={twikoo.envId} region={twikoo.region} /&amp;gt;}

  {provider === &amp;quot;waline&amp;quot; &amp;amp;&amp;amp; &amp;lt;Waline serverURL={waline.serverURL} /&amp;gt;}

  {provider === &amp;quot;none&amp;quot; &amp;amp;&amp;amp; &amp;lt;p&amp;gt;Comments are disabled for this site.&amp;lt;/p&amp;gt;}
&amp;lt;/div&amp;gt;

&amp;lt;style&amp;gt;
  .comments-container {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--color-border);
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Step 3: Use the CommentSystem Component&lt;/h3&gt;
&lt;p&gt;Finally, use this component in your blog post layout:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;---
// In your blog post layout file
import CommentSystem from &amp;quot;../../components/comments/CommentSystem.astro&amp;quot;;
// Other imports and frontmatter...
---

&amp;lt;!-- Your blog post content --&amp;gt;
&amp;lt;article&amp;gt;
  &amp;lt;slot /&amp;gt;
&amp;lt;/article&amp;gt;

&amp;lt;!-- Add the comment section --&amp;gt;
&amp;lt;CommentSystem /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;h3&gt;Common Issues with Twikoo:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Script Loading Failures&lt;/strong&gt;: If the Twikoo script fails to load, check your network connection and make sure the CDN is accessible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment ID Issues&lt;/strong&gt;: Double-check your environment ID to ensure it&amp;#39;s correct.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Region Errors&lt;/strong&gt;: If you&amp;#39;re using Tencent CloudBase, make sure you&amp;#39;ve set the correct region.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Common Issues with Waline:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Server URL Errors&lt;/strong&gt;: Make sure your Waline server URL is correct and the server is running.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database Connection Issues&lt;/strong&gt;: Check that your LeanCloud application is properly set up and the keys are correctly configured.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Missing Required Fields&lt;/strong&gt;: If users can&amp;#39;t submit comments, check if you&amp;#39;ve set required fields that users aren&amp;#39;t filling out.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Extending with Other Comment Systems&lt;/h2&gt;
&lt;p&gt;The approach we&amp;#39;ve taken makes it easy to add support for additional comment systems to your Frosti blog. Here&amp;#39;s how you might add another system:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new component for the comment system in &lt;code&gt;src/components/comments/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;config.ts&lt;/code&gt; file to include configuration for the new system&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;CommentSystem.astro&lt;/code&gt; component to conditionally render the new system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We welcome contributions from the community to add support for other popular comment systems such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Utterances (GitHub-based comments)&lt;/li&gt;
&lt;li&gt;Giscus (GitHub Discussions-based comments)&lt;/li&gt;
&lt;li&gt;Remark42&lt;/li&gt;
&lt;li&gt;CommentBox&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Adding a comment system to your Frosti blog enhances user engagement and creates a community around your content. In this guide, we&amp;#39;ve covered how to integrate two popular comment systems, Twikoo and Waline, providing step-by-step instructions for setting up both the backend and frontend components.&lt;/p&gt;
&lt;p&gt;Remember that each comment system has its own strengths and considerations, so choose the one that best fits your needs and your audience&amp;#39;s preferences.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;ve implemented another comment system for your Frosti blog, consider sharing your work with the community to help others enhance their blogs as well.&lt;/p&gt;
&lt;p&gt;Happy blogging and engaging with your readers!&lt;/p&gt;
</content:encoded><dc:creator>Frosti</dc:creator><pubDate>Mon, 14 Apr 2025 16:00:00 GMT</pubDate></item><item><title>Using mdx in Frosti</title><link>https://frosti.saroprock.com/blog/frosti-mdx/</link><guid isPermaLink="true">https://frosti.saroprock.com/blog/frosti-mdx/</guid><description>Using MDX in Frosti to enrich article content with more components</description><content:encoded>&lt;blockquote&gt;This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: &lt;a href=&quot;https://frosti.saroprock.com/blog/frosti-mdx/&quot;&gt;https://frosti.saroprock.com/blog/frosti-mdx/&lt;/a&gt;&lt;/blockquote&gt; &lt;p&gt;import Collapse from &amp;quot;../../components/mdx/Collapse.astro&amp;quot;;
import Diff from &amp;quot;../../components/mdx/Diff.astro&amp;quot;;
import Error from &amp;quot;../../components/mdx/Error.astro&amp;quot;;
import Info from &amp;quot;../../components/mdx/Info.astro&amp;quot;;
import Kbd from &amp;quot;../../components/mdx/Kbd.astro&amp;quot;;
import Success from &amp;quot;../../components/mdx/Success.astro&amp;quot;;
import Warning from &amp;quot;../../components/mdx/Warning.astro&amp;quot;;
import TimeLine from &amp;quot;../../components/mdx/TimeLine.astro&amp;quot;;
import LinkCard from &amp;quot;../../components/mdx/LinkCard.astro&amp;quot;;&lt;/p&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;This article describes how to use the components provided by Frosti in &lt;code&gt;mdx&lt;/code&gt; to realize the functions that can&amp;#39;t be realized by normal &lt;code&gt;md&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Main text&lt;/h2&gt;
&lt;h3&gt;Getting started&lt;/h3&gt;
&lt;p&gt;First you need to create an &lt;code&gt;mdx&lt;/code&gt; file, which is as simple as changing the extension to &lt;code&gt;.mdx&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Introducing&lt;/h3&gt;
&lt;p&gt;The components provided by Frosti are placed in the &lt;code&gt;/mdx&lt;/code&gt; folders. Write something under the document properties (frontmatter):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;import Collapse from &amp;quot;../../components/mdx/Collapse.astro&amp;quot;;
import Diff from &amp;quot;../../components/mdx/Diff.astro&amp;quot;;
import Error from &amp;quot;../../components/mdx/Error.astro&amp;quot;;
import Info from &amp;quot;../../components/mdx/Info.astro&amp;quot;;
import Kbd from &amp;quot;../../components/mdx/Kbd.astro&amp;quot;;
import Success from &amp;quot;../../components/mdx/Success.astro&amp;quot;;
import Warning from &amp;quot;../../components/mdx/Warning.astro&amp;quot;;
import TimeLine from &amp;quot;../../components/mdx/TimeLine.astro&amp;quot;;
import LinkCard from &amp;quot;../../components/mdx/LinkCard.astro&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;h4&gt;Collapse&lt;/h4&gt;
&lt;Collapse title=&quot;This is an example text.&quot;&gt;
  This is the hidden content!
&lt;/Collapse&gt;

&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;Collapse title=&amp;quot;This is an example text.&amp;quot;&amp;gt;
  This is the hidden content!
&amp;lt;/Collapse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Diff&lt;/h4&gt;
&lt;p&gt;&lt;Diff r=&quot;https://frosti.saroprock.com/image/r.png&quot; l=&quot;https://frosti.saroprock.com/image/l.png&quot;&gt;&lt;/Diff&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;Diff r=&amp;quot;/image/r.png&amp;quot; l=&amp;quot;/image/l.png&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Error&lt;/h4&gt;
&lt;p&gt;&lt;Error&gt;Maybe something went wrong?&lt;/Error&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;Error&amp;gt;Maybe something went wrong? &amp;lt;/Error&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Warning&lt;/h4&gt;
&lt;p&gt;&lt;Warning&gt;Hey! Watch out for potholes! &lt;/Warning&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;Warning&amp;gt;Hey! Watch out for potholes! &amp;lt;/Warning&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Message&lt;/h4&gt;
&lt;p&gt;&lt;Info&gt;It&amp;#39;s just a message. &lt;/Info&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;Info&amp;gt;It&amp;#39;s just a message. &amp;lt;/Info&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Success&lt;/h4&gt;
&lt;p&gt;&lt;Success&gt;Congratulations on your successful deployment! &lt;/Success&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;Success&amp;gt;Congratulations on your successful deployment! &amp;lt;/Success&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Kbd&lt;/h4&gt;
&lt;p&gt;&lt;Kbd&gt;Ctrl&lt;/Kbd&gt; + &lt;Kbd&gt;C&lt;/Kbd&gt; to copy the text.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;Kbd&amp;gt;Ctrl&amp;lt;/Kbd&amp;gt; + &amp;lt;Kbd&amp;gt;C&amp;lt;/Kbd&amp;gt; to copy the text.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;TimeLine&lt;/h4&gt;
&lt;p&gt;&amp;lt;TimeLine
  items={[
    { year: &amp;quot;1984&amp;quot;, event: &amp;quot;First Macintosh computer&amp;quot; },
    { year: &amp;quot;1998&amp;quot;, event: &amp;quot;iMac&amp;quot; },
    { year: &amp;quot;2001&amp;quot;, event: &amp;quot;iPod&amp;quot; },
    { year: &amp;quot;2007&amp;quot;, event: &amp;quot;iPhone&amp;quot; },
    { year: &amp;quot;2015&amp;quot;, event: &amp;quot;Apple Watch&amp;quot; },
  ]}
/&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;TimeLine
  items={[
    { year: &amp;quot;1984&amp;quot;, event: &amp;quot;First Macintosh computer&amp;quot; },
    { year: &amp;quot;1998&amp;quot;, event: &amp;quot;iMac&amp;quot; },
    { year: &amp;quot;2001&amp;quot;, event: &amp;quot;iPod&amp;quot; },
    { year: &amp;quot;2007&amp;quot;, event: &amp;quot;iPhone&amp;quot; },
    { year: &amp;quot;2015&amp;quot;, event: &amp;quot;Apple Watch&amp;quot; },
  ]}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;LinkCard&lt;/h4&gt;
&lt;p&gt;&lt;LinkCard
  title=&quot;Frosti&quot;
  desc=&quot;My blog project!&quot;
  url=&quot;https://github.com/EveSunMaple/Frosti&quot;
  img=&quot;https://frosti.saroprock.com/view.png&quot;
/&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-astro&quot;&gt;&amp;lt;LinkCard
  title=&amp;quot;Frosti&amp;quot;
  desc=&amp;quot;My blog project!&amp;quot;
  url=&amp;quot;https://github.com/EveSunMaple/Frosti&amp;quot;
  img=&amp;quot;/view.png&amp;quot;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content:encoded><dc:creator>Frosti</dc:creator><pubDate>Thu, 11 Jul 2024 16:00:00 GMT</pubDate></item><item><title>Markdown Style Guide</title><link>https://frosti.saroprock.com/blog/markdown-style-guide/</link><guid isPermaLink="true">https://frosti.saroprock.com/blog/markdown-style-guide/</guid><description>Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.</description><content:encoded>&lt;blockquote&gt;This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: &lt;a href=&quot;https://frosti.saroprock.com/blog/markdown-style-guide/&quot;&gt;https://frosti.saroprock.com/blog/markdown-style-guide/&lt;/a&gt;&lt;/blockquote&gt; &lt;p&gt;Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.&lt;/p&gt;
&lt;h2&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1&gt;H1&lt;/h1&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h3&gt;H3&lt;/h3&gt;
&lt;h4&gt;H4&lt;/h4&gt;
&lt;h5&gt;H5&lt;/h5&gt;
&lt;h6&gt;H6&lt;/h6&gt;
&lt;h2&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2&gt;Images&lt;/h2&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![Alt text](./full/or/relative/path/of/image)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://frosti.saroprock.com/home.webp&quot; alt=&quot;blog placeholder&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Blockquotes&lt;/h2&gt;
&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h3&gt;Blockquote without attribution&lt;/h3&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&amp;gt; **Note** that you can use _Markdown syntax_ within a blockquote.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Blockquote with attribution&lt;/h3&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; Don&amp;#39;t communicate by sharing memory, share memory by communicating.&amp;lt;br&amp;gt;
&amp;gt; — &amp;lt;cite&amp;gt;Rob Pike[^1]&amp;lt;/cite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;#39;t communicate by sharing memory, share memory by communicating.&lt;br&gt;
— &lt;cite&gt;Rob Pike[^1]&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[^1]: The above quote is excerpted from Rob Pike&amp;#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=PAAkCSZUG1c&quot;&gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&lt;/p&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;| Italics   | Bold     | Code   |
| --------- | -------- | ------ |
| _italics_ | **bold** | `code` |
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Italics&lt;/th&gt;
&lt;th&gt;Bold&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;Code Blocks&lt;/h2&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;p&gt;we can use 3 backticks ``` in new line and write snippet and close with 3 backticks on new line and to highlight language specific syntac, write one word of language name after first 3 backticks, for eg. html, javascript, css, markdown, typescript, txt, bash&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;```cpp
#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
const int N = 1e5 + 5;
int n, k, a[N];
long long ans;
vector&amp;lt;int&amp;gt; v[N];
int main()
{
    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;n, &amp;amp;k);
    for (int i = 1; i &amp;lt;= n; i++)
    {
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i]);
        v[i % k].push_back(a[i]);
    }
    for (int i = 0; i &amp;lt; k; i++)
        sort(v[i].rbegin(), v[i].rend());
    for (int i = 0; i &amp;lt; k; i++)
    {
        for (int j = 0; j + 1 &amp;lt; v[i].size(); j += 2)
        {
            ans += v[i][j] + v[i][j + 1];
        }
    }
    printf(&amp;quot;%lld\n&amp;quot;, ans);
    return 0;
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
const int N = 1e5 + 5;
int n, k, a[N];
long long ans;
vector&amp;lt;int&amp;gt; v[N];
int main()
{
    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;n, &amp;amp;k);
    for (int i = 1; i &amp;lt;= n; i++)
    {
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i]);
        v[i % k].push_back(a[i]);
    }
    for (int i = 0; i &amp;lt; k; i++)
        sort(v[i].rbegin(), v[i].rend());
    for (int i = 0; i &amp;lt; k; i++)
    {
        for (int j = 0; j + 1 &amp;lt; v[i].size(); j += 2)
        {
            ans += v[i][j] + v[i][j + 1];
        }
    }
    printf(&amp;quot;%lld\n&amp;quot;, ans);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;List Types&lt;/h2&gt;
&lt;h3&gt;Ordered List&lt;/h3&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;1. First item
2. Second item
3. Third item
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Unordered List&lt;/h3&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;- List item
- Another item
- And another item
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Nested list&lt;/h3&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;- Fruit
  - Apple
  - Orange
  - Banana
- Dairy
  - Milk
  - Cheese
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fruit&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dairy&lt;ul&gt;
&lt;li&gt;Milk&lt;/li&gt;
&lt;li&gt;Cheese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Elements&lt;/h2&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;lt;abbr title=&amp;quot;Graphics Interchange Format&amp;quot;&amp;gt;GIF&amp;lt;/abbr&amp;gt; is a bitmap image format.

H&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;O

X&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt; + Y&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt; = Z&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt;

Press &amp;lt;kbd&amp;gt;&amp;lt;kbd&amp;gt;CTRL&amp;lt;/kbd&amp;gt;+&amp;lt;kbd&amp;gt;ALT&amp;lt;/kbd&amp;gt;+&amp;lt;kbd&amp;gt;Delete&amp;lt;/kbd&amp;gt;&amp;lt;/kbd&amp;gt; to end the session.

Most &amp;lt;mark&amp;gt;salamanders&amp;lt;/mark&amp;gt; are nocturnal, and hunt for insects, worms, and other small creatures.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;p&gt;&lt;abbr title=&quot;Graphics Interchange Format&quot;&gt;GIF&lt;/abbr&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;/sup&gt; + Y&lt;sup&gt;n&lt;/sup&gt; = Z&lt;sup&gt;n&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;/mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
</content:encoded><dc:creator>Frosti</dc:creator><pubDate>Sun, 30 Jun 2024 16:00:00 GMT</pubDate></item><item><title>Using MDX</title><link>https://frosti.saroprock.com/blog/using-mdx/</link><guid isPermaLink="true">https://frosti.saroprock.com/blog/using-mdx/</guid><description>Lorem ipsum dolor sit amet</description><content:encoded>&lt;blockquote&gt;This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: &lt;a href=&quot;https://frosti.saroprock.com/blog/using-mdx/&quot;&gt;https://frosti.saroprock.com/blog/using-mdx/&lt;/a&gt;&lt;/blockquote&gt; &lt;p&gt;This theme comes with the &lt;a href=&quot;https://docs.astro.build/en/guides/integrations-guide/mdx/&quot;&gt;@astrojs/mdx&lt;/a&gt; integration installed and configured in your &lt;code&gt;astro.config.mjs&lt;/code&gt; config file. If you prefer not to use MDX, you can disable support by removing the integration from your config file.&lt;/p&gt;
&lt;h2&gt;Why MDX?&lt;/h2&gt;
&lt;p&gt;MDX is a special flavor of Markdown that supports embedded JavaScript &amp;amp; JSX syntax. This unlocks the ability to &lt;a href=&quot;https://docs.astro.build/en/guides/markdown-content/#mdx-features&quot;&gt;mix JavaScript and UI Components into your Markdown content&lt;/a&gt; for things like interactive charts or alerts.&lt;/p&gt;
&lt;p&gt;If you have existing content authored in MDX, this integration will hopefully make migrating to Astro a breeze.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Here is how you import and use a UI component inside of MDX.&lt;br&gt;When you open this page in the browser, you should see the clickable button below.&lt;/p&gt;
&lt;h2&gt;More Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mdxjs.com/docs/what-is-mdx&quot;&gt;MDX Syntax Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.astro.build/en/guides/markdown-content/#markdown-and-mdx-pages&quot;&gt;Astro Usage Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&quot;https://docs.astro.build/en/reference/directives-reference/#client-directives&quot;&gt;Client Directives&lt;/a&gt; are still required to create interactive components. Otherwise, all components in your MDX will render as static HTML (no JavaScript) by default.&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><dc:creator>Frosti</dc:creator><pubDate>Fri, 01 Jul 2022 16:00:00 GMT</pubDate></item></channel></rss>